Rangos:
Rangos, el principal uso y quizás el más apropiado para los rangos, 
es expresar una secuencia: las secuencias tienen un punto inicial y 
un punto final, y una forma de producir los sucesivos valores entre ambos. 
En Ruby, esas secuencias son creadas usando los operandos ‘…’ y ‘…’

‘…’ genera una secuencia donde los puntos límites están incluidos.
(1..3).to_a
 
#es la secuencia 1, 2, 3
‘…’ genera una secuencia en la que no está incluida el límite superior.
(1...5).to_a
 
#equivale a 1, 2, 3, 4

# Range
(1..5).class
("a".."f").methods
(1..5).map { |x| x + 1 }

# 2.. VS 3...
(1..5).to_a
(1...5).to_a

Aunque elementos decimales no pueden ser convertibles a un arreglo,
si intentamos convertir un rango decimal a un arreglo nos va a devolver
un error, por suerte si se pueden utilizar otros métodos determinísticos
como include? o member?
Si el primer valor del rango es un entero y el segundo es un decimal, todo el rango se convierte en entero.
El valor decimal del ultimo dato del rango no es redondeado sino que es truncado 
(osea no se toma en cuenta el valor decimal, por lo que 4.4 y 4.6 quedan finalmente como un simple 4)
El valor de los rangos tienen que ser del mismo tipo, si pongo un numero y una letra, el rango no se crea,
otra forma de crear el rango .
Los rangos también pueden elaborarse a partir de otros tipos de objetos pero estos tienen que 
ser compatibles.