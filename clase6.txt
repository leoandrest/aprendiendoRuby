Tipos de datos III: Symbols

Símbolos

Un símbolo es el objeto más básico que puedes crear en Ruby: es un nombre y una ID interna. 
Los símbolos son útiles por que dado un símbolo, se refiere al mismo objeto en todo el programa.
Por lo tanto, son más eficientes que los strings: dos strings con el mismo nombre, son dos objetos 
distintos. Esto implica ahorrar de tiempo y memoria.

+ Un símbolo parece una variable, pero está precedido de dos puntos. Ej: :action,
:line_tines
+ Los símbolos no contienen valores como las variables
+ Es una cadena inmutable, osea que no se puede modificar en tiempo de ejecución.
+ Al ser inmutables, no se les puede pasar métodos
+ Cuando creo dos símbolos con el mismo valor, Ruby reciclara segundo, lo que genera mayor performance
+ Se recomienda su uso cuando no se necesita modificar el “strign”, cuando no necesito los 
métodos del “strign”, cuando necesito utilizar un nombre (como las claves de los hashes)

# Ejecuta estas líneas en `irb` para ver el resultado de cada instrucción

# Symbols

# Definición de un symbol
color = :rojo

# Strings VS Symbols
color.class
otro_color = "rojo"
color == otro_color
color == otro_color.to_sym

# Object id
color.object_id
:rojo.object_id
"rojo".object_id
"rojo".object_id

:rojo.methods

Cada vez que se declara una variable en Ruby (objeto), se le asigna un identificador único. 
Para verlo se usa el método object_id.

Symbol es usado generalmente para declarar constantes, así se ahorra espacio ya 
que Symbol utiliza solo una dirección en memoria para un valor, por lo que si 
se declara otro Symbol con el valor de un Symbol ya declarado apuntará al mismo objeto.

color = "rojo" # string
color = :rojo # Symbol